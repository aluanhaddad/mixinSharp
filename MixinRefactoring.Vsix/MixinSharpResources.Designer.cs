//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MixinSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MixinSharpResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MixinSharpResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MixinSharp.MixinSharpResources", typeof(MixinSharpResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add mixin interfaces to child class.
        /// </summary>
        public static string AddMixinInterfacesToChildClass {
            get {
                return ResourceManager.GetString("AddMixinInterfacesToChildClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this option to add all interfaces of the mixin to the child&apos;s interface list.
        ///The interface implementations will delegate the calls to the mixin instance..
        /// </summary>
        public static string AddMixinInterfacesToChildClassDescription {
            get {
                return ResourceManager.GetString("AddMixinInterfacesToChildClassDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create region block.
        /// </summary>
        public static string CreateRegions {
            get {
                return ResourceManager.GetString("CreateRegions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When checked, the generated forwarding members will be enclosed by a region block..
        /// </summary>
        public static string CreateRegionsDescription {
            get {
                return ResourceManager.GetString("CreateRegionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add documentation to forwarding methods.
        /// </summary>
        public static string IncludeDocumentation {
            get {
                return ResourceManager.GetString("IncludeDocumentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If members in the mixin have a code documentation, their documentation will also be added to the generated forwarding methods if this option is selected..
        /// </summary>
        public static string IncludeDocumentationDescription {
            get {
                return ResourceManager.GetString("IncludeDocumentationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize mixin instance via constructor injection.
        /// </summary>
        public static string InjectMixins {
            get {
                return ResourceManager.GetString("InjectMixins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When this option is set, code will be generated to initialize the mixin  fields via constructor injection.
        ///Either a new constructor will be generated  in the child class or an existing one will be extended..
        /// </summary>
        public static string InjectMixinsDocumentation {
            get {
                return ResourceManager.GetString("InjectMixinsDocumentation", resourceCulture);
            }
        }
    }
}
