{"name":"mixinSharp","tagline":"extension for VS2015 that adds mixins to C#","body":"# mixinSharp\r\n\r\nMixinSharp (or shorter: mixin#) is a code refactoring extension for Visual Studio 2015 that adds mixin support to C# by auto generating the required code.  \r\nThe VSIX binary installation file can be found in the [Visual Studio Gallery](https://visualstudiogallery.msdn.microsoft.com/05c8154b-eb71-45f1-986e-923acca556f1), the full source code is available here. \r\n\r\n## what are mixins?\r\n\r\nMixins are a software concept that provides code reuse by *composition* instead of *inheritance*.  \r\nThe code that should be reused is placed in a separate class (the *mixin*) and any other class (in this context also called a *child* class) that wants to use this code simply holds a reference to the mixin and delegates method calls to it.  \r\nFor the ouside standing caller it looks like that the child instance is handling the request directly.  \r\n \r\n## why are they useful?\r\n\r\nCompared to classical inheritance, mixins have some advantages. Please check the wiki for a more detailed comparison between the both approaches.  \r\nUnfortunately, C# does not support mixins directly on a language level, that's where mixinSharp comes into play by offering a refactoring step that automatically creates the required mixin code.\r\n\r\n## a simple example\r\n\r\nyour mixin class with the code you want to reuse\r\n```csharp\r\npublic class NameMixin\r\n{\r\n  public string Name { get; set; }\r\n  public override string ToString() => Name;\r\n}\r\n```\r\nthe class where you want to include your mixin (your child)\r\n```csharp\r\npublic class Person\r\n{\r\n  private NameMixin _name = new NameMixin();\r\n}\r\n```\r\nOpen the *Quick Action\" context menu while your cursor is on your ``` _name``` field declaration:    \r\n\r\n![Quick action](https://github.com/pgenfer/mixinSharp/blob/master/images/quick_action.png)    \r\n\r\nFrom the context menu that popped up, choose the entry *Include mixin: 'name'*    \r\n\r\n![Include mixin](https://github.com/pgenfer/mixinSharp/blob/master/images/mixin_preview.png)  \r\n\r\nAfter applying the mixin refactoring, your mixin class is included in your child:\r\n```csharp\r\npublic class Person\r\n{\r\n  private NameMixin _name = new NameMixin();\r\n  public string Name\r\n  {\r\n    get { return _name.Name; }\r\n    set { _name.Name = value; }\r\n  }\r\n  \r\n  public override string ToString() => _name.ToString();\r\n}\r\n```\r\n\r\n## Installation Instruction\r\nmixinSharp is a Visual Studio 2015 Extension (VSIX), as such it can be downloaded from the [Visual Studio Gallery](https://visualstudiogallery.msdn.microsoft.com/05c8154b-eb71-45f1-986e-923acca556f1).  \r\nAfter downloading the VSIX file, doubleclicking it will start the installation process.    \r\n\r\nTo compile the extension from source, you will have to install the [.NET Compiler Platform SDK](https://visualstudiogallery.msdn.microsoft.com/2ddb7240-5249-4c8c-969e-5d05823bcb89) first (but Visual Studio will automatically ask you to do so during the build).\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}